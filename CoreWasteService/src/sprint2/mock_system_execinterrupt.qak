System /*-trace*/ waste_service

mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/hu/waste"   //broker.hivemq.com

Event ledtrigger : led(CMD)
Event robotState : info(ATHOME,MOVING,STOPPED,TIMESTAMP)
Request  dopath   : dopath( PATH  )
Reply dopathdone  : dopathdone( ARG ) 
Reply dopathfail  : dopathfail( ARG )




/*===========================	Sprint_2 : RPI	============================ */
Event sonardata : distance(DISTANCE) 
Event stop : stop(ARGS)
Event resume : resume(ARGS)


Context ctxpathexec ip [host="127.0.0.1" port=8049]
Context ctxwaste ip [ host="localhost" port=8033]

//Context ctxledqak22 ip [host="192.168.195.33" port=8065] 



ExternalQActor pathexec context ctxpathexec


QActor thresholdchecker context ctxwaste {
	
	
	[#
	
	val DLIMIT = 40
	
	var HigherThanLimit = false
		
	#]
	
	State s0 initial {
		println("		THRESHOLD_CHECKER | STARTED")	
	}
	Goto accept
	
	
	State accept {
		
		println(" THRESHOLD_CHECKER | ACCEPTING")
	}
	Transition t0 whenEvent sonardata -> check
	
	
	State check{
		
		//printCurrentMessage
		
		onMsg(sonardata : distance(DISTANCE)){
			
			
			[#
			
				var Distance = payloadArg(0).toInt()
				
				HigherThanLimit = (Distance >= DLIMIT) 
			
				
			#]
		}
	}
	
	Goto broadcastResume if [# HigherThanLimit #] else  broadcastStop
	
	
	
//	Event stop : stop(ARGS)
//Event resume : resume(ARGS)

	State broadcastStop{
		
		emit stop : stop(stop)
	}
	Goto accept
	
	State broadcastResume{
		emit resume : resume(resume)
	}
	Goto accept
}


QActor mocksystem context ctxwaste {
	
	
	
	State s0 initial {
		println("		MOCK_SYSTEM | STARTED")	
		delay 2000
		request pathexec -m dopath : dopath(wwwwlwwwwwwlwwwwlwwwwwwl)
	}
	
	Transition t0 whenTime 4000 -> broadcastStop
				whenReply 	dopathdone -> end	
				whenReply dopathfail -> end
	

	State broadcastStop{
		
		emit stop : stop(stop)
	}
	
	Transition t0 whenTime 4000 -> broadcastResume
				whenReply 	dopathdone -> end
				whenReply dopathfail -> end
	
	State broadcastResume{
		emit resume : resume(resume)
	}
	Transition t0 whenTime 4000 -> broadcastStop
				whenReply 	dopathdone -> end
				whenReply dopathfail -> end
	

	State end {
		println("		MOCK_SYSTEM | TERMINATED")	
			[#
		
			var CurTimestamp = 	 timestamputil.TimestampNow()
		#
		]
		
		emit robotState : info(true,false,false,$CurTimestamp)
		
		terminate 1
	}
}


QActor trolleyanalyzer context ctxwaste {
	[# 
		var LastStatusTimestamp = timestamputil.TimestampMin() 
		var stopped = true
		var continuos = false
	#]
	
	
	
	

	State s0 initial {
		println("		TROLLEY_ANALYZER | STARTED")	
	}
	Goto accept
	
	State accept {
		println("		TROLLEY_ANALYZER | ACCPEPTING")	
	}
	Transition t0 whenEvent robotState ->  check_stopped
	
	State check_stopped {
		println("		TROLLEY_ANALYZER | CHECK_STOPPED")	
		printCurrentMessage
		onMsg ( robotState : info(ATHOME,MOVING,STOPPED,TIMESTAMP)) {
			[#
				var CurrentTimestamp = payloadArg(3)
			 	var Ahomeinput = payloadArg(0).toBoolean()
			 	var Movinginput = payloadArg(1).toBoolean()
			 	var Stoppedinput = payloadArg(2).toBoolean()
			 	#]
			 	println("CurrentTimestamp=$CurrentTimestamp Ahomeinput=$Ahomeinput Movinginput=$Movinginput  Stoppedinput=$Stoppedinput ")
			 	[#
			 	if (Ahomeinput && !Movinginput  && !Stoppedinput ){
			 		stopped = false
			 		continuos = true
#]
					emit ledtrigger : led(off) // on - off - blink
[#			 		
			 	} else if (!Ahomeinput && Movinginput && !Stoppedinput ){
			 		stopped = false 
			 		continuos = false
#]
					emit ledtrigger : led(blink) // on - off - blink
[#
			 	} else if (!Ahomeinput && !Movinginput && Stoppedinput ) {
			 		stopped = true 
			 		continuos = false
#]
					emit ledtrigger : led(on) // on - off - blink
[#
			 	}
			 	else {
			 		// msg format error
			 		#]
			 		println("TROLLEY_ANALYZER	|	MSG FORMAT ERROE")
			 		[#
			 	}
			 	LastStatusTimestamp =  CurrentTimestamp
			
			
			
			#]
		}
	}
	Transition t0 whenEvent robotState ->  check_stopped
	}
	


