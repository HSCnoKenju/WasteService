System /*-trace*/ waste_service

//mqttBroker "broker.hivemq.com" : 1883  eventTopic "unibo/hu/radar"
// mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/hu/waste"   //broker.hivemq.com

/*===========================	Sprint_2 : RPI	============================ */
Event sonardata : distance(DISTANCE) 
Event stop : stop(ARGS)
Event resume : resume(ARGS)

//Related to the observer, generated by the runtime
Dispatch coapUpdate: coapUpdate(RESOURCE, VALUE)

//Context ctxwaste ip [ host="127.0.0.1" port=8033]
Context ctxsonarqak22 ip [host="127.0.0.1" port=8061] 

Context ctxwaste ip [ host="localhost" port=8033]


ExternalQActor sonarqak22 context ctxsonarqak22



 
QActor thresholdchecker context ctxwaste { //ctxobserver ctxboundaryqak30{

[#
	
	val DLIMIT = 40
	
	var HigherThanLimit = false
		
	#]
 	State s0 initial{
 		 
		observeResource  thresholdchecker
	} 
	Transition t0 whenMsg coapUpdate -> handleUpdate
	             // whenEvent alarm -> handleAlarm
	 
	State handleUpdate{
		
		
		onMsg(coapUpdate : coapUpdate(RESOURCE, VALUE)){
			
			
			[#
			
				var Distance = payloadArg(1).toInt()
				
				HigherThanLimit = (Distance >= DLIMIT) 
			
				
			#]
		}
		
		onMsg (coapUpdate : coapUpdate(RESOURCE, VALUE)) {
  		    [# MsgUtil.outgreen("applobserver OBSERVES: ${payloadArg(1)} FROM ${payloadArg(0)} ") #]
		}
	}
	Goto broadcastResume if [# HigherThanLimit #] else  broadcastStop
	
	
	
//	Event stop : stop(ARGS)
//Event resume : resume(ARGS)

	State broadcastStop{
		
		emit stop : stop(stop)
	}
	Transition t0 whenMsg coapUpdate -> handleUpdate
	
	State broadcastResume{
		emit resume : resume(resume)
	}
	Transition t0 whenMsg coapUpdate -> handleUpdate
	
	             // whenEvent alarm -> handleAlarm
	
	/* 
	State handleAlarm{
		onMsg (alarm : alarm(X)) {
  		    [# MsgUtil.outmagenta("applobserver handles ALARM: ${payloadArg(0)}") #]
		}
	}
	Transition t0 whenMsg coapUpdate -> handleUpdate
	              whenEvent alarm -> handleAlarm
	*/
 }


/* 
QActor thresholdchecker context ctxwaste {
	
	
	
	[#
	
	val DLIMIT = 40
	
	var HigherThanLimit = false
		
	#]
	
	State s0 initial {
		
		println("		THRESHOLD_CHECKER | STARTED")	
	}
	Goto accept
	
	
	State accept {
		
		println(" THRESHOLD_CHECKER | ACCEPTING")
	}
	Transition t0 whenEvent sonardata -> check
	
	
	State check{
		
		//printCurrentMessage
		
		onMsg(sonardata : distance(DISTANCE)){
			
			
			[#
			
				var Distance = payloadArg(0).toInt()
				
				HigherThanLimit = (Distance >= DLIMIT) 
			
				
			#]
		}
	}
	
	Goto broadcastResume if [# HigherThanLimit #] else  broadcastStop
	
	
	
//	Event stop : stop(ARGS)
//Event resume : resume(ARGS)

	State broadcastStop{
		
		emit stop : stop(stop)
	}
	Goto accept
	
	State broadcastResume{
		emit resume : resume(resume)
	}
	Goto accept
}
* 
* 
*/


/* 
QActor sonarmockalternate context ctxwaste{
	
	State high initial {
		
		emit sonardata : sonardata(100)
	}
	Transition t0 whenTime 1000 ->low 
	
	State low {
		emit sonardata : sonardata(5)
	}

	Transition t0 whenTime 1000 ->high
	
}
*/
QActor mocktrolleylistener context ctxwaste {
	
	
	State s0 initial {
		
		println("MOCK LED |")
		printCurrentMessage
	}
	Transition t0 whenEvent stop -> s0
	whenEvent resume -> s0
	
	
}
