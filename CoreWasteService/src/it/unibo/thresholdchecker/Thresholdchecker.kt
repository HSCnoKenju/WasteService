/* Generated by AN DISI Unibo */ 
package it.unibo.thresholdchecker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Thresholdchecker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			
			val DLIMIT = 40
			
			var HigherThanLimit = false
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("		THRESHOLD_CHECKER | STARTED")
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
				state("accept") { //this:State
					action { //it:State
						println(" THRESHOLD_CHECKER | ACCEPTING")
					}
					 transition(edgeName="t00",targetState="check",cond=whenEvent("sonardata"))
				}	 
				state("check") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(DISTANCE)"), Term.createTerm("distance(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											
												var Distance = payloadArg(0).toInt()
												
												HigherThanLimit = (Distance >= DLIMIT) 
											
												
						}
					}
					 transition( edgeName="goto",targetState="broadcastResume", cond=doswitchGuarded({ HigherThanLimit  
					}) )
					transition( edgeName="goto",targetState="broadcastStop", cond=doswitchGuarded({! ( HigherThanLimit  
					) }) )
				}	 
				state("broadcastStop") { //this:State
					action { //it:State
						emit("stop", "stop(stop)" ) 
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
				state("broadcastResume") { //this:State
					action { //it:State
						emit("resume", "resume(resume)" ) 
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
			}
		}
}
