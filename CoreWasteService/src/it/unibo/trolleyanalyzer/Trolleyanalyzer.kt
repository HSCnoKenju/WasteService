/* Generated by AN DISI Unibo */ 
package it.unibo.trolleyanalyzer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolleyanalyzer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var LastStatusTimestamp = timestamputil.TimestampMin() 
				var stopped = true
				var continuos = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
				state("accept") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="check_stopped",cond=whenEvent("robotState"))
				}	 
				state("check_stopped") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("info(ATHOME,MOVING,STOPPED,TIMESTAMP)"), Term.createTerm("info(ATHOME,MOVING,STOPPED,TIMESTAMP)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var CurrentTimestamp = payloadArg(3)
											 	var Ahomeinput = payloadArg(0).toBoolean()
											 	var Movinginput = payloadArg(1).toBoolean()
											 	var Stoppedinput = payloadArg(2).toBoolean()
								println("CurrentTimestamp=$CurrentTimestamp Ahomeinput=$Ahomeinput Movinginput=$Movinginput  Stoppedinput=$Stoppedinput ")
								
											 	if (Ahomeinput && !Movinginput  && !Stoppedinput ){
											 		stopped = false
											 		continuos = true
								updateResourceRep("trolleyState(idle)" 
								)
								emit("ledtrigger", "led(off)" ) 
											 		
											 	} else if (!Ahomeinput && Movinginput && !Stoppedinput ){
											 		stopped = false 
											 		continuos = false
								updateResourceRep("trolleyState(working)" 
								)
								emit("ledtrigger", "led(blink)" ) 
								
											 	} else if (!Ahomeinput && !Movinginput && Stoppedinput ) {
											 		stopped = true 
											 		continuos = false
								updateResourceRep("trolleyState(stopped)" 
								)
								emit("ledtrigger", "led(on)" ) 
								
											 	}
											 	else {
											 		// msg format error
								println("TROLLEY_ANALYZER	|	MSG FORMAT ERROE")
								
											 	}
											 	LastStatusTimestamp =  CurrentTimestamp
											
											
											
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="check_stopped",cond=whenEvent("robotState"))
				}	 
			}
		}
}
