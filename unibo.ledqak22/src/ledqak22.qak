System /*-trace*/ ledqak22
mqttBroker "broker.hivemq.com" : 1883  eventTopic "unibo/hu/waste"

// Event  sonardata       : distance( V )   //for the application level
// Event  thrill          : info(CMD)

Event ledtrigger : led(CMD) // on - off - blink


Dispatch ledon : info(on)
Dispatch ledoff : info(off)
Dispatch ledblink : info(blink)

Context ctxledqak22 ip [host="localhost" port=8065] 

CodedQActor ledsimulator context ctxledqak22 className "Ledsimulatorfsm"

CodedQActor ledconcrete context ctxledqak22 className "Ledconcretefsm"


QActor ledqak22 context ctxledqak22{
	
	[# val simulate = DomainSystemConfig.isSimulation() #]
	
	
 	State s0 initial {
		println("$name STARTS")
	}
	Transition t0  whenEvent ledtrigger -> interpreterTrigger
	
	State interpreterTrigger{
		
		printCurrentMessage
		onMsg( ledtrigger : led(CMD) ){
			[# var Cmd = payloadArg(0) #]
			
		//	println("payload0 $Cmd")
			if [# Cmd=="on" #]{
				
			//	println("on true")
				/* orribile ma forward accetta solo qactor come parametro*/
				
				if [# simulate#] {
					
				//	println("simulate true")
					forward ledsimulator -m ledon : info(on)
				}else {
					forward ledconcrete -m ledon : info(on)
				}
				 
				 
				 updateResource [#"led(on)"#]
								
			}else {
			
			if [# Cmd=="blink"#] {
				
				//println("blink true")
					
				if [# simulate#] {
					forward ledsimulator -m ledblink : info(blink)
				}else {
					forward ledconcrete -m ledblink : info(blink)
				}
			
			
				 updateResource [#"led(blink)"#]
				
			} else /*off*/ { 
						
				if [# simulate#] {
					forward ledsimulator -m ledoff : info(off)
				}else {
					forward ledconcrete -m ledoff : info(off)
				}
			
			
				 updateResource [#"led(off)"#]
					
				}
			}
			
		}	 
	}
	Transition t0 whenEvent ledtrigger -> interpreterTrigger
}

/* 
QActor ledsimulatorfsm context ctxledqak22 { 
	
	State s0 initial {
		
		println("$name | STARTS")
		
	}
	
	Goto waiting
	
	
	
	State waiting {
		
	}
	Transition t0 whenMsg ledon -> on
	whenMsg ledoff -> off
	whenMsg ledblink -> blink
	
	
	State on {
		
	}
	Goto waiting
	State off {
		
	}
	Goto waiting
	State blink {
		
	}
	Goto waiting
}

*/
