/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="s00",targetState="accept",cond=whenRequest("waste"))
					transition(edgeName="s01",targetState="handlesonar",cond=whenDispatch("sonardata"))
					transition(edgeName="s02",targetState="handlerobot",cond=whenEvent("robotState"))
				}	 
				state("accept") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("details(TYPE,TRUCKLOAD)"), Term.createTerm("details(TYPE,TRUCKLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("waste", "loadAccept", "info(ok)"   )  
								emit("weights", "info(100)" ) 
								request("goal", "destination("Plastic")" ,"trolley" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handlesonar") { //this:State
					action { //it:State
						forward("stop", "stop("stop")" ,"trolley" ) 
						forward("resume", "resume("resume")" ,"trolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handlerobot") { //this:State
					action { //it:State
						forward("ledtrigger", "led("blink")" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
