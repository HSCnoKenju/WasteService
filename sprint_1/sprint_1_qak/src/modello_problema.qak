System /*-trace*/ waste_service


/* =================== MESSAGGI MODELLO ================== */

Request waste : details(TYPE,TRUCKLOAD) // TYPE: Glass / Plastic
Reply loadAccept : info(ok)  	// Reply loadAccepted : info(TYPE,WEIGHT,AVAILABLE_WEIGHT)   
Reply loadRejected : info(rip)   // Reply loadRejected : info(TYPE,WEIGHT,AVAILABLE_WEIGHT) 



/* =================== MESSAGGI PROBLEMA =============== */ 

 
Request goal : destination(CONTAINER) // Glass / Plastic
Event pickup : info(TYPE) // Glass / Plastic
Reply workdone : info(done)

Context ctx_waste_service_monolitic ip [ host="localhost" port=8080]



QActor transporttrolley context ctx_waste_service_monolitic {
	
	[#
	
		var CurrentType = ""
	
	#]
	
	State s0 initial {
		println("		TRANSPORT TROLLEY | STARTED")	
	}
	Goto accepting
	
	State accepting {
		
		printCurrentMessage
		println("		TRANSPORT TROLLEY | NEW WORK")	
	}
	Transition t0 whenRequest goal -> arriveIndoor
	
	State arriveIndoor {
		
		onMsg ( goal : destination(CONTAINER) ){
			[#
			
			CurrentType = payloadArg(0)
				
			#]
			
			
		}
		
		emit pickup : info($CurrentType)
		println("		TRANSPORT TROLLEY | INDOOR")	
	
	}
	Goto arriveDestination
	
	
	State arriveDestination {
		
		replyTo goal with workdone : info(done)
	 	println("		TRANSPORT TROLLEY | $CurrentType")	
	
	}
	Transition t1  whenTime 10 -> accepting 
				   whenRequest goal -> arriveIndoor /*else Goto accepting*/
				   
	 			   
	
	State goingHome {
		
		println("		TRANSPORT TROLLEY | going HOME")	
	}
	Goto accepting
	
}

QActor waste_truck_mock context ctx_waste_service_monolitic {
	
	State s0 initial {
		println("		WASTE_TRUCK GENERATOR | STARTED")
	}
	Goto newLoad
	
	State newLoad{
			println("		WASTE_TRUCK GENERATOR | NEW REQUEST")
			request waste_service -m waste : details(Glass,2)
			//request waste_service -m waste : details(Plastic,11)
	}
	Transition t0 whenReply loadAccept -> accepted
				  whenReply loadRejected -> rejected
	
	State accepted{
		
		printCurrentMessage
	}
	Goto end
	
	State rejected{
		
		printCurrentMessage
	}
	Goto end
	
	State end {
		println("		WASTE_TRUCK GENERATOR | END")
	}
	
}


QActor waste_service context ctx_waste_service_monolitic {
	[#
		var MAXPB = 10
		var MAXGB = 10
		var RequestedType  = ""
		var RequestedWeight = 0
		var Available = true 
	#]
	
	State s0 initial {
			println("WASTE_SERVICE | STARTED")
	}
	Goto accepting
	
	
	State accepting {
			println("WASTE_SERVICE | ACCEPTING")
		}
	Transition t0 whenRequest waste -> check_availability
	
	State check_availability {
		printCurrentMessage
		println("WASTE_SERVICE | CHECK AVAILABILITY")	
		onMsg ( waste : details(TYPE,TRUCKLOAD) ) {
			[#
				RequestedType = payloadArg(0)
				RequestedWeight = payloadArg(1).toInt()

					if (RequestedType == "Glass"){
						Available = RequestedWeight <= MAXGB
					}
					else if (RequestedType == "Plastic"){
						Available = RequestedWeight <= MAXPB
					}
				else 
					{	
						println("WASTE_SERVICE | WRONG TYPE")
						Available = false
					}
			#]
			
			if [# (Available)#] {
			//replyTo waste with  loadAccept : info(ok)
			} else {
			replyTo waste with  loadRejected : info(rip)
			}			
		}
	}
	Goto  issue_trolley if [#Available# ] else accepting
	
	State issue_trolley {
		
		println("WASTE_SERVICE | ISSUE TROLLEY")
		request transporttrolley -m goal : destination($RequestedType)
		
	}
	Transition t1 whenReply workdone -> lost_pickup 
				  whenEvent pickup -> updateWeights	
	
	State lost_pickup{
		
		[#
			
			if (RequestedType == "Glass"){
						MAXGB -= RequestedWeight 
					}
			else if (RequestedType == "Plastic"){
						MAXPB -= RequestedWeight 
					}
			else 
					{	
						println("WASTE_SERVICE | ERROR LOST PICKUP")
					}
	
		#]
		
		replyTo waste with loadAccept : 	info(ok)
		
	}
	Goto accepting
	
	
	State updateWeights{
			[#
			
			if (RequestedType == "Glass"){
						MAXGB -= RequestedWeight 
					}
			else if (RequestedType == "Plastic"){
						MAXPB -= RequestedWeight 
					}
			else 
					{	
						println("WASTE_SERVICE | ERROR UPDATE WEIGHTS")

					}
	
			#]
			
			
		replyTo waste with loadAccept : info(ok)
	}
	Goto acceptBusy
	
	State acceptBusy{
		
		println("WASTE_SERVICE | ACCEPTING(BUSY)")
	}
	Transition t2 whenReply workdone -> accepting
				  whenRequest waste -> checkWhenBusy
	
	
	
	
	State checkWhenBusy{
		printCurrentMessage
		println("WASTE_SERVICE | CHECK AVAILABILITY")	
		onMsg ( waste : details(TYPE,TRUCKLOAD) ) {
			[#
				RequestedType = payloadArg(0)
				RequestedWeight = payloadArg(1).toInt()

					if (RequestedType == "Glass"){
						Available = RequestedWeight <= MAXGB
					}
					else if (RequestedType == "Plastic"){
						Available = RequestedWeight <= MAXPB
					}
				else 
					{	
						println("WASTE_SERVICE | WRONG TYPE")
						Available = false
					}
			#]
			
			if [# (Available)#] {
			//replyTo waste with  loadAccept : info(ok)
			} else {
			replyTo waste with  loadRejected : info(rip)
			}			
		}
	}
	Goto addRequestToQueue if [# Available#] else acceptBusy
	
	State addRequestToQueue{
		
		println("WASTE_SERVICE | ISSUE TROLLEY TO QUEUE")
		request transporttrolley -m goal : destination($RequestedType)
		
	}
	Goto acceptBusy
}