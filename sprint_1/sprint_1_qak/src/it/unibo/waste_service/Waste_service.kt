/* Generated by AN DISI Unibo */ 
package it.unibo.waste_service

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waste_service ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Available_Glass = 0
				var Available_Plastic = 0
				var RequestedType  = ""
				var RequestedWeight = 0
				var Available = true 
				
				var Init_Glass = 0
				var Init_Plastic = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("WASTE_SERVICE | STARTED")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t127",targetState="getWeights",cond=whenDispatch("init_capacity"))
				}	 
				state("getWeights") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("values(MAXGB,MAXPB)"), Term.createTerm("values(MAXGB,MAXPB)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											
												Available_Glass = payloadArg(0).toInt()
												Available_Plastic = payloadArg(1).toInt()
												Init_Glass = payloadArg(0).toInt()
												Init_Plastic = payloadArg(1).toInt()
												
												
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="accepting", cond=doswitch() )
				}	 
				state("accepting") { //this:State
					action { //it:State
						println("WASTE_SERVICE | ACCEPTING")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t028",targetState="check_availability",cond=whenRequest("waste"))
					transition(edgeName="t029",targetState="reset_weights",cond=whenDispatch("reset"))
				}	 
				state("reset_weights") { //this:State
					action { //it:State
						println("WASTE_SERVICE | SHOULD ONLY BE IN TESTING, RESET WEIGHTS")
						
								
								Available_Glass = Init_Glass
								Available_Plastic = Init_Plastic
								
									
						updateResourceRep("Glass=$Available_Glass Plastic=$Available_Plastic " 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="accepting", cond=doswitch() )
				}	 
				state("check_availability") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE_SERVICE | CHECK AVAILABILITY")
						if( checkMsgContent( Term.createTerm("details(TYPE,TRUCKLOAD)"), Term.createTerm("details(TYPE,TRUCKLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												RequestedType = payloadArg(0)
												RequestedWeight = payloadArg(1).toInt()
								
													if (RequestedType == "Glass"){
														Available = RequestedWeight <= Available_Glass
													}
													else if (RequestedType == "Plastic"){
														Available = RequestedWeight <= Available_Plastic
													}
												else 
													{	
														println("WASTE_SERVICE | WRONG TYPE")
														Available = false
													}
								if(  (Available) 
								 ){}
								else
								 {updateResourceRep( "Glass=$Available_Glass Plastic=$Available_Plastic" 
								 )
								 answer("waste", "loadRejected", "info(rip)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="issue_trolley", cond=doswitchGuarded({Available 
					}) )
					transition( edgeName="goto",targetState="accepting", cond=doswitchGuarded({! (Available 
					) }) )
				}	 
				state("issue_trolley") { //this:State
					action { //it:State
						println("WASTE_SERVICE | ISSUE TROLLEY")
						request("goal", "destination($RequestedType)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t130",targetState="lost_pickup",cond=whenReply("workdone"))
					transition(edgeName="t131",targetState="updateWeights",cond=whenEvent("pickup"))
				}	 
				state("lost_pickup") { //this:State
					action { //it:State
						
									
									if (RequestedType == "Glass"){
												Available_Glass -= RequestedWeight 
											}
									else if (RequestedType == "Plastic"){
												Available_Plastic -= RequestedWeight 
											}
									else 
											{	
												println("WASTE_SERVICE | ERROR LOST PICKUP")
											}
							
						updateResourceRep( "Glass=$Available_Glass Plastic=$Available_Plastic" 
						)
						answer("waste", "loadAccept", "info(ok)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="accepting", cond=doswitch() )
				}	 
				state("updateWeights") { //this:State
					action { //it:State
						
									
									if (RequestedType == "Glass"){
												Available_Glass -= RequestedWeight 
											}
									else if (RequestedType == "Plastic"){
												Available_Plastic -= RequestedWeight 
											}
									else 
											{	
												println("WASTE_SERVICE | ERROR UPDATE WEIGHTS")
						
											}
							
						updateResourceRep( "Glass=$Available_Glass Plastic=$Available_Plastic" 
						)
						answer("waste", "loadAccept", "info(ok)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="acceptBusy", cond=doswitch() )
				}	 
				state("acceptBusy") { //this:State
					action { //it:State
						println("WASTE_SERVICE | ACCEPTING(BUSY)")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t232",targetState="accepting",cond=whenReply("workdone"))
					transition(edgeName="t233",targetState="checkWhenBusy",cond=whenRequest("waste"))
					transition(edgeName="t234",targetState="reset_weightsBusy",cond=whenDispatch("reset"))
				}	 
				state("reset_weightsBusy") { //this:State
					action { //it:State
						println("WASTE_SERVICE | (BUSY) SHOULD ONLY BE IN TESTING, RESET WEIGHTS")
						
								
								Available_Glass = Init_Glass
								Available_Plastic = Init_Plastic
								
									
						updateResourceRep( "Glass=$Available_Glass Plastic=$Available_Plastic" 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="acceptBusy", cond=doswitch() )
				}	 
				state("checkWhenBusy") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("WASTE_SERVICE | CHECK AVAILABILITY")
						if( checkMsgContent( Term.createTerm("details(TYPE,TRUCKLOAD)"), Term.createTerm("details(TYPE,TRUCKLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												RequestedType = payloadArg(0)
												RequestedWeight = payloadArg(1).toInt()
								
													if (RequestedType == "Glass"){
														Available = RequestedWeight <= Available_Glass
													}
													else if (RequestedType == "Plastic"){
														Available = RequestedWeight <= Available_Plastic
													}
												else 
													{	
														println("WASTE_SERVICE | WRONG TYPE")
														Available = false
													}
								if(  (Available) 
								 ){}
								else
								 {updateResourceRep( "Glass=$Available_Glass Plastic=$Available_Plastic" 
								 )
								 answer("waste", "loadRejected", "info(rip)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="addRequestToQueue", cond=doswitchGuarded({ Available 
					}) )
					transition( edgeName="goto",targetState="acceptBusy", cond=doswitchGuarded({! ( Available 
					) }) )
				}	 
				state("addRequestToQueue") { //this:State
					action { //it:State
						println("WASTE_SERVICE | ISSUE TROLLEY TO QUEUE")
						request("goal", "destination($RequestedType)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="acceptBusy", cond=doswitch() )
				}	 
			}
		}
}
