/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				
				var Active = false
				
				var SimDistance = 90
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("SONAR | started ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingMessages", cond=doswitch() )
				}	 
				state("waitingMessages") { //this:State
					action { //it:State
						println("SONAR | idle ; waiting")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t31",targetState="parseCmd",cond=whenDispatch("cmdSonar"))
					transition(edgeName="t32",targetState="handleIsActive",cond=whenRequest("isActive"))
				}	 
				state("handleIsActive") { //this:State
					action { //it:State
						answer("isActive", "sonarActive", "sonarActive($Active)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="emitDistance", cond=doswitchGuarded({ Active  
					}) )
					transition( edgeName="goto",targetState="waitingMessages", cond=doswitchGuarded({! ( Active  
					) }) )
				}	 
				state("parseCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmd(COMAND)"), Term.createTerm("cmd(COMAND)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											
												if (payloadArg(0).equals("activate"))
													
													Active = true
												
												else if (payloadArg(0).equals("deactivate"))
													
													Active = false
												
												
								println("SONAR | EXEC, CURRENT STATE = $Active")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="emitDistance", cond=doswitchGuarded({ Active  
					}) )
					transition( edgeName="goto",targetState="waitingMessages", cond=doswitchGuarded({! ( Active  
					) }) )
				}	 
				state("emitDistance") { //this:State
					action { //it:State
						if( ( SimDistance >=0 ) 
						 ){emit("sonar", "sonar($SimDistance)" ) 
						println("===============================")
						println("")
						println("")
						println("SONAR | EMIT an EVENT = $SimDistance")
						 SimDistance = SimDistance - 10 
						}
						else
						 { SimDistance = 90  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		//sysaction { //it:State
				 	 		  stateTimer = TimerActor("timer_emitDistance", 
				 	 			scope, context!!, "local_tout_sonar_emitDistance", 5000.toLong() )
				 	 		//}
					}	 	 
					 transition(edgeName="t33",targetState="emitDistance",cond=whenTimeout("local_tout_sonar_emitDistance"))   
					transition(edgeName="t34",targetState="parseCmd",cond=whenDispatch("cmdSonar"))
					transition(edgeName="t35",targetState="handleIsActive",cond=whenRequest("isActive"))
				}	 
			}
		}
}
