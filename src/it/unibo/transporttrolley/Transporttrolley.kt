/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.util.*

class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var PathStr = StringJoiner(" ")
				var CurrentType = ""
				var PositionsMap: Map<String, Pair<Int,Int>>
				var CurrentPosition: Pair<Int,Int>
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("		TRANSPORT TROLLEY | STARTED")
					}
					 transition( edgeName="goto",targetState="accepting", cond=doswitch() )
				}	 
				state("gotPositions") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("coordinates(HOMEX,HOMEY,INDOORX,INDOORY,PLASTICX,PLASTICY,GLASSX,GLASSY)"), Term.createTerm("coordinates(HOMEX,HOMEY,INDOORX,INDOORY,PLASTICX,PLASTICY,GLASSX,GLASSY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												PositionsMap = mapOf ("HOME" to Pair(payloadArg(0).toInt(),payloadArg(1).toInt()), "INDOOR" to Pair(payloadArg(2).toInt(),payloadArg(3).toInt()), "PLASTIC" to Pair(payloadArg(4).toInt(),payloadArg(5).toInt()), "GLASS" to Pair(payloadArg(6).toInt(),payloadArg(7).toInt())  )
												
						}
					}
					 transition(edgeName="t10",targetState="setStart",cond=whenDispatch("start_position"))
				}	 
				state("setStart") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("coordinates(STARTX,STARTY)"), Term.createTerm("coordinates(STARTX,STARTY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentPosition = Pair(payloadArg(0).toInt(),payloadArg(1).toInt())
													
						}
					}
					 transition( edgeName="goto",targetState="accepting", cond=doswitch() )
				}	 
				state("accepting") { //this:State
					action { //it:State
						 PathStr = StringJoiner(" ")	 
						println("$name in ${currentState.stateName} | $currentMsg")
						println("		TRANSPORT TROLLEY | NEW WORK")
					}
					 transition(edgeName="t01",targetState="arriveIndoor",cond=whenRequest("goal"))
				}	 
				state("arriveIndoor") { //this:State
					action { //it:State
						PathStr.add("ACCEPTED") 
						updateResourceRep("$PathStr" 
						)
						if( checkMsgContent( Term.createTerm("destination(CONTAINER)"), Term.createTerm("destination(CONTAINER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											
											CurrentType = payloadArg(0)
												
								PathStr.add("INDOOR") 
								updateResourceRep("$PathStr" 
								)
						}
						emit("pickup", "info($CurrentType)" ) 
						println("		TRANSPORT TROLLEY | INDOOR")
					}
					 transition( edgeName="goto",targetState="arriveDestination", cond=doswitch() )
				}	 
				state("arriveDestination") { //this:State
					action { //it:State
						PathStr.add("$CurrentType") 
						updateResourceRep("$PathStr" 
						)
						answer("goal", "workdone", "info(done)"   )  
						println("		TRANSPORT TROLLEY | $CurrentType")
						stateTimer = TimerActor("timer_arriveDestination", 
							scope, context!!, "local_tout_transporttrolley_arriveDestination", 10.toLong() )
					}
					 transition(edgeName="t12",targetState="goingHome",cond=whenTimeout("local_tout_transporttrolley_arriveDestination"))   
					transition(edgeName="t13",targetState="arriveIndoor",cond=whenRequest("goal"))
				}	 
				state("goingHome") { //this:State
					action { //it:State
						PathStr.add("HOME") 
						updateResourceRep("$PathStr" 
						)
						println("		TRANSPORT TROLLEY | going HOME")
					}
					 transition( edgeName="goto",targetState="accepting", cond=doswitch() )
				}	 
			}
		}
}
